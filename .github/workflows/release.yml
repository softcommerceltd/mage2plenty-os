name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: Release Metapackage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Creating release for tag: ${TAG_NAME}"
          else
            echo "Not a tag push, exiting"
            exit 1
          fi

      - name: Generate metapackage release notes
        id: changelog
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create release notes header
          echo "# What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Try to extract from CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            # Look for the section that matches this version
            awk -v version="$VERSION" '
              # Match version line like "# test-mage2plenty-suite [1.3.3] 14 Jul 2025"
              $0 ~ "\\[" version "\\]" { found=1; next }
              # Exit only on main version lines (single #, not ###)
              found && /^# [^#].*\[[0-9]+\.[0-9]+\.[0-9]+\]/ { exit }
              found && /^###/ { 
                # Extract module name and version
                gsub(/^### /, "")
                gsub(/ \[/, " `")
                gsub(/\]$/, "`")
                print "## " $0
                print ""
                next
              }
              found && /^- / { print }
              found && NF==0 { print }
            ' CHANGELOG.md >> release_notes.md
            
            # If no content was extracted, use a simpler approach
            if [ $(wc -l < release_notes.md) -le 2 ]; then
              echo "## Updated Packages" >> release_notes.md
              echo "" >> release_notes.md
              
              # Extract package updates from composer.json changes
              if [ -f "composer.json" ]; then
                echo "See composer.json for the full list of updated package versions." >> release_notes.md
              fi
            fi
          else
            # No CHANGELOG.md, generate from commits
            echo "## Changes in this release" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get the previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")
            
            if [ -z "$PREVIOUS_TAG" ]; then
              COMMITS=$(git log ${TAG_NAME} --pretty=format:"- %s" -10)
            else
              COMMITS=$(git log ${PREVIOUS_TAG}..${TAG_NAME} --pretty=format:"- %s")
            fi
            
            echo "$COMMITS" >> release_notes.md
          fi
          
          # Add separator and full changelog link
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get the previous tag for comparison link
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${TAG_NAME}" >> release_notes.md
          else
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${TAG_NAME}" >> release_notes.md
          fi

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          
          # Check if release already exists
          if gh release view "${TAG_NAME}" &>/dev/null; then
            echo "Release ${TAG_NAME} already exists, skipping"
            exit 0
          fi
          
          # Create release with "Release v1.2.3" format
          gh release create "${TAG_NAME}" \
            --title "Release ${TAG_NAME}" \
            --notes-file release_notes.md